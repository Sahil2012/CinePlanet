// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


// config ---------------------------------------------------------------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:12345@localhost:5432/theater"
}


// Model ----------------------------------------------------------------------
model Movie {
  id String @id @default(@autoincrement())
  name String
  description String?
  starring String?
  rating Rating
  time Int
  genres Genre[]
  shows Show[]
  tickets Ticket[]
}

model Seat {
  screenId Int
  screen Screen @relation(fields: [screenId], references: [id])
  ticketId Int
  ticket Ticket? @relation(fields: [ticketId], references: [id])
  rowNo Int
  colNo Int
  type SeatType
  status SeatStatus @default(AVAILABLE)

  @@id([screenId, rowNo, colNo])
}

model Screen {
  id Int @id @default(@autoincrement())
  name String
  seats Seat[]
  shows Show[]
}

model Show {
  id Int @id @default(autoincrement())
  movieId Int
  movie Movie @relation(fields: [movieId], references: [id])
  screenId Int
  screen Screen @relation(fields: [screenId], references: [id])
  startTime DateTime
  ticket Ticket[]
}

model Ticket {
  id Int @id @default(autoincrement())
  movieId Int
  movie Movie @relation(fields: [movieId], references: [id])
  showId Int
  show Show @relation(fields: [showId], references: [id])
  seats Seat[]
}


// Enums -------------------------------------------------------------------
enum Rating {
  U
  U/A
  A
  S
}

enum Genre {
  HORROR
  ROMANCE
  ACTION
  DRAMA
  SCI-FI
  THRILLER
  COMEDY
  DOCUMENTRY
  ADUVENTURE
  FANTASY
  ANIMATION
  WAR
}

enum SeatType {
  CLUB
  PRIME
  PRIMEPLUS
  ROYALE
  ROYALERECLINER
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  LOCKED
}

